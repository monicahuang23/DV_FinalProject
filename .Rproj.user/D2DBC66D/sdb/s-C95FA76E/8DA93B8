{
    "contents" : "# server.R\nrequire(\"jsonlite\")\nrequire(\"RCurl\")\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(leaflet)\n\nshinyServer(function(input, output) {\n\n# start of plot 1\n      df1 <- eventReactive(input$clicks1, {data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from final_grades\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n      })\n\n      output$distPlot1 <- renderPlot({             \n            plot1 <- ggplot() + \n                  coord_cartesian() + \n                  scale_x_continuous() +\n                  scale_y_continuous() +\n                  labs(title=isolate(input$title)) +\n                  labs(x=paste(\"District Name\"), y=paste(\"Free and Reduced Meals\")) +\n                  layer(data=df1(), \n                        mapping=aes(x=as.numeric(as.character(DISTRICTNAME)), y=as.numeric(as.character(X_FREE_AND_REDUCED)), color=FINAL_PLANTYPE),\n                        stat=\"identity\", \n                        stat_params=list(), \n                        geom=\"point\",\n                        #geom_params=list(colour=\"black\"), \n                        position=position_jitter(width=0.3, height=0)\n                  )\n            plot1\n      }) \n\n      observeEvent(input$clicks, {\n            print(as.numeric(input$clicks))\n      })\n      \n# start of plot 2     \n      df2 <- eventReactive(input$clicks1, {data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from final_grades\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n      })\n      \n      output$distPlot2 <- renderPlot({             \n            plot2 <- ggplot() + \n                  coord_cartesian() + \n                  scale_x_discrete() +\n                  scale_y_discrete() +\n                  labs(title=isolate(input$title)) +\n                  labs(x=paste(\"Initial Plantype\"), y=paste(\"Average Overall Weighted Growth Rate\")) +\n                  layer(data=df2(), \n                        mapping=aes(x=INITIAL_PLANTYPE, y=OVERALL_WEIGHTED_GROWTH_GRADE), \n                        stat=\"identity\", \n                        stat_params=list(), \n                        geom=\"bar\",\n                        geom_params=list(colour=\"black\"), \n                        position=position_identity()\n                 # ) +\n                  #layer(data=df2(), \n                   #     mapping=aes(x=FINAL_PLANTYPE, y=EMH, fill=KPI.1), \n                    #    stat=\"identity\", \n                     #   stat_params=list(), \n                      #  geom=\"tile\",\n                       # geom_params=list(alpha=rv$alpha), \n                        #position=position_identity()\n                  )\n           plot2\n      }) \n      \n      observeEvent(input$clicks, {\n        print(as.numeric(input$clicks))\n      })\n      \n# start of plot 3\n      df3 <- eventReactive(input$clicks3, {data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"SELECT final_plantype, avg(overall_weighted_growth_grade) as avg_weighted_gg, avg(rank_tot) as avg_rank_tot FROM final_grade WHERE overall_weighted_growth_grade is not null AND rank_tot is not null and final_plantype is not null group by final_plantype order by final_plantype;\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n      })\n      \n      output$distPlot3 <- renderPlot({\n          plot3 <- ggplot() + \n              coord_cartesian() + \n              scale_x_discrete() +\n              scale_y_continuous() +\n              labs(title='Overall Weighted Growth Average for Final Plantype') +\n              labs(x=\"Final Plantype\", y=paste(\"Avg Overall Weighted Growth Grade\")) +\n              layer(data=df3(), \n                    mapping=aes(x=as.character(FINAL_PLANTYPE), y=AVG_WEIGHTED_GG, fill=AVG_RANK_TOT),\n                    stat=\"identity\", \n                    stat_params=list(), \n                    geom=\"bar\",\n                    geom_params=list(), \n                    position=position_identity()\n              ) +\n              theme(axis.text.x = element_text(size  = 10, angle = 45, hjust = 1, vjust = 1))\n              if (input$avg_read) {\n                plot3 <- plot3 + geom_hline(aes(yintercept=6.62699, colour = \"red\")) +\n                annotate(\"text\", label = \"Avg Reading Growth Grade\", x = 2, 6.3, size = 4, colour = \"red\")\n              }\n              if (input$avg_math) {\n                 plot3 <- plot3 + geom_hline(aes(yintercept=6.71413, colour = \"black\")) +\n                 annotate(\"text\", label = \"Avg Math Growth Grade\", x = 2, 7, size = 4, colour = \"black\")\n              }\n              if (input$avg_write) {\n                 plot3 <- plot3 + geom_hline(aes(yintercept=6.69606, colour = \"blue\")) +\n                 annotate(\"text\", label = \"Avg Writing Growth Grade\", x = 5, 7, size = 4, colour = \"blue\")\n              }\n        plot3\n     })\n      \n     observeEvent(input$clicks, {\n        print(as.numeric(input$clicks))\n     })\n})",
    "created" : 1449503987165.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4081371046",
    "id" : "8DA93B8",
    "lastKnownWriteTime" : 1449511541,
    "path" : "~/DataVisualization/DV_FinalProject/04 Shiny/server.R",
    "project_path" : "04 Shiny/server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}