df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y=paste("RANK_TOT")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Graduation Rates & Ranks For Each Plantype') +
labs(x="SPF P's Grad Rate", y=paste("Rank Total")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(SPF_PS_IND_GRAD_RATE)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(SPF_PS_IND_GRAD_RATE)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
shiny::runApp('04 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Graduation Rates & Ranks For Each Plantype') +
labs(x="SPF P's Grad Rate", y=paste("Rank Total")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(SPF_PS_IND_GRAD_RATE)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
layer(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
#View (df)
require(extrafont)
p <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Title') +
labs(x="EMH", y="RANK_TOT") +
geom_dotplot(data=df,
mapping=aes(x=as.numeric(as.character(EMH)), y=as.numeric(as.character(RANK_TOT)), color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
#geom_params=list(),
position=position_identity()
#position=position_jitter(width=0.3, height=0)
)
print(p)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
p <- ggplot(data=df, aes(x=EMH, y=RANK_TOT)) + geom_dotplot()
print(p)
p <- ggplot(data=df, aes(x=EMH, y=RANK_TOT)) + geom_dotplot()
print(p)
p <- ggplot(df, aes(x=EMH, y=RANK_TOT)) + geom_dotplot()
print(p)
p <- ggplot(df, aes(x=EMH, y=RANK_TOT)) +
geom_boxplot()
p
p <- ggplot(df, aes(x=EMH, y=RANK_TOT)) +
geom_boxplot()
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
outer_join_df <- enrl_working %>% left_join(., k_12_frl, by = "SCHOOL_CODE", copy=TRUE) %>% right_join(., final_grades, by = "SCHOOL_CODE", copy=TRUE) %>% mutate(PCT_NONWHITE = PCT_AMIND + PCT_ASIAN + PCT_BLACK + PCT_HISP + PCT_PI + PCT_2ORMORE, FRL = X_FREE_AND_REDUCED / 100) %>% select(SPF_PS_IND_GRAD_RATE, FRL, EMH, PCT_NONWHITE, FINAL_PLANTYPE) %>% dplyr::rename(., GRAD_RATE=SPF_PS_IND_GRAD_RATE) %>% filter(EMH != "A")
plot2 <- ggplot() +
coord_cartesian() +
scale_x_continuous(labels=percent) +
scale_y_continuous(labels=percent) +
facet_grid(.~EMH)+
labs(title='FRL School Minority Distribution') +
labs(x="Percentage of Non-White Students", y=paste("Percentage of Students on Free/Reduced Lunch Meal Plan")) +
layer(data=outer_join_df,
mapping=aes(x = PCT_NONWHITE, y= FRL, color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position= position_jitter(width=0.3)
)
plot2
plot2 <- ggplot() +
coord_cartesian() +
scale_x_continuous(labels=percent) +
scale_y_continuous(labels=percent) +
facet_grid(.~EMH)+
labs(title='FRL School Minority Distribution') +
labs(x="Percentage of Non-White Students", y=paste("Percentage of Students on Free/Reduced Lunch Meal Plan")) +
layer(data=outer_join_df,
mapping=aes(x = PCT_NONWHITE, y= FRL, color=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position= position_jitter(width=0.3)
)
require("jsonlite")
require("RCurl")
require('dplyr')
require('ggplot2')
# Change the USER and PASS below to be your UTEid
final_grades <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade where SCHOOLNUMBER is not null"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
truancy <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from enrl_working where SCHOOL_CODE is not null"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
# Changes column names to join by
names(final_grades)[names(final_grades)=="SCHOOLNUMBER"] <- "SCHOOL_CODE"
#Convert columns to the correct type
final_names <- c("SCHOOLNAME","DISTRICTNAME","EMH","EMH_COMBINED","INITIAL_PLANTYPE","FINAL_PLANTYPE","NOTES")
final_nums <- setdiff(names(final_grades),final_names)
final_grades[final_nums] <- lapply(final_grades[final_nums], function(x) as.numeric(as.character(x)))
final_grades[final_names] <- lapply(final_grades[final_names], function(x) as.character(x))
#enrl_names <- c("ORGANIZATION_NAME", "SCHOOL_NAME")
#enrl_working[enrl_names] <- lapply(enrl_working[enrl_names], function(x) as.character(x))
# join by school code
x <- final_grades %>% inner_join(., truancy, by="SCHOOL_CODE", copy=TRUE) %>% filter(EMS != NULL)
x <- x %>% select(EMH, FINAL_PLANTYPE, MATH_GROWTH_GRADE, READ_GROWTH_GRADE, ATTENDANCE_RATE)
# Change the USER and PASS below to be your UTEid
final_grades <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade where SCHOOLNUMBER is not null"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
truancy <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from enrl_working where SCHOOL_CODE is not null"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
# Changes column names to join by
names(final_grades)[names(final_grades)=="SCHOOLNUMBER"] <- "SCHOOL_CODE"
#Convert columns to the correct type
final_names <- c("SCHOOLNAME","DISTRICTNAME","EMH","EMH_COMBINED","INITIAL_PLANTYPE","FINAL_PLANTYPE","NOTES")
final_nums <- setdiff(names(final_grades),final_names)
final_grades[final_nums] <- lapply(final_grades[final_nums], function(x) as.numeric(as.character(x)))
final_grades[final_names] <- lapply(final_grades[final_names], function(x) as.character(x))
#enrl_names <- c("ORGANIZATION_NAME", "SCHOOL_NAME")
#enrl_working[enrl_names] <- lapply(enrl_working[enrl_names], function(x) as.character(x))
# join by school code
x <- final_grades %>% inner_join(., truancy, by="SCHOOL_CODE", copy=TRUE) %>% filter(EMH != NULL)
x <- x %>% select(EMH, FINAL_PLANTYPE, MATH_GROWTH_GRADE, READ_GROWTH_GRADE, ATTENDANCE_RATE)
final_grades <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select SCHOOLNUMBER, avg(MATH_GROWTH_GRADE) as AV_MATH_GG, avg(READ_GROWTH_GRADE) as AV_READ_GG, FINAL_PLANTYPE from final_grade where SCHOOLNUMBER is not null"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
truancy <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select school_code,avg(attendance_rate) as avg_attendance_rate  from truancy where SCHOOL_CODE is not null"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
names(final_grades)[names(final_grades)=="SCHOOLNUMBER"] <- "SCHOOL_CODE"
#Convert columns to the correct type
final_names <- c("SCHOOLNAME","DISTRICTNAME","EMH","EMH_COMBINED","INITIAL_PLANTYPE","FINAL_PLANTYPE","NOTES")
final_nums <- setdiff(names(final_grades),final_names)
final_grades[final_nums] <- lapply(final_grades[final_nums], function(x) as.numeric(as.character(x)))
final_grades[final_names] <- lapply(final_grades[final_names], function(x) as.character(x))
#enrl_names <- c("ORGANIZATION_NAME", "SCHOOL_NAME")
#enrl_working[enrl_names] <- lapply(enrl_working[enrl_names], function(x) as.character(x))
# join by school code
x <- final_grades %>% inner_join(., truancy, by="SCHOOL_CODE", copy=TRUE) %>% filter(EMH != NULL)
x <- x %>% select(EMH, FINAL_PLANTYPE, AV_MATH_GG, AV_READ_GG, AVG_ATTENDANCE_RATE)
x <- final_grades %>% inner_join(., truancy, by="SCHOOL_CODE", copy=TRUE) #%>% filter(EMH != NULL)
truancy <- c("ATTENDANCE_RATE", "SCHOOL_NAME")
x <- final_grades %>% inner_join(., truancy, by="SCHOOL_CODE", copy=TRUE) #%>% filter(EMH != NULL)
require(shiny)
geom="text",
source('~/DataVisualization/DV_FinalProject/04 Shiny/Crosstab.R')
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
shinyServer(function(input, output) {
KPI_Low_Max_value <- reactive({input$KPI1})
KPI_Medium_Max_value <- reactive({input$KPI2})
rv <- reactiveValues(alpha = 0.50)
observeEvent(input$light, { rv$alpha <- 0.50 })
observeEvent(input$dark, { rv$alpha <- 0.75 })
df3 <- eventReactive(input$clicks3, {data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"""select Average Reading Growth Grade || \\\' \\\' || \\\'Average Math Growth Grade\\\' as measure_names, avg(MATH_GROWTH_GRADE) || \\\' \\\' || \\\'avg(READ_GROWTH_GRADE)\\\' as measure_values, FINAL_PLANTYPE from FINAL_GRADES
where EMH is not "A"
group by FINAL_PLANTYPE
union all
select avg(ATTENDANCE_RATE) as AV_ATTENDANCE_RATE from TRUANCY
order by 1;"""
')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375',
MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
})
output$distPlot3 <- renderPlot(height=1000, width=2000, {
plot3 <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_wrap(~CLARITY, ncol=1) +
labs(title='Blending 2 Data Sources') +
labs(x=paste("Region Sales"), y=paste("Sum of Sales")) +
layer(data=df3(),
mapping=aes(x=EMH, y=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
#) + coord_flip() +
)+
layer(data=df3(),
mapping=aes(x=EMH, y=MEASURE_NAMES, label=(MEASURE_VALUES)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-0.5),
position=position_identity()
)
plot3
})
})
# server.R
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
shinyServer(function(input, output) {
KPI_Low_Max_value <- reactive({input$KPI1})
KPI_Medium_Max_value <- reactive({input$KPI2})
rv <- reactiveValues(alpha = 0.50)
observeEvent(input$light, { rv$alpha <- 0.50 })
observeEvent(input$dark, { rv$alpha <- 0.75 })
df3 <- eventReactive(input$clicks3, {data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"""select Average Reading Growth Grade || \\\' \\\' || \\\'Average Math Growth Grade\\\' as measure_names, avg(MATH_GROWTH_GRADE) || \\\' \\\' || \\\'avg(READ_GROWTH_GRADE)\\\' as measure_values, FINAL_PLANTYPE from FINAL_GRADES
where EMH is not "A"
group by FINAL_PLANTYPE
union all
select avg(ATTENDANCE_RATE) as AV_ATTENDANCE_RATE from TRUANCY
order by 1;"""
')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375',
MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
})
output$distPlot3 <- renderPlot(height=1000, width=2000, {
plot3 <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_wrap(~CLARITY, ncol=1) +
labs(title='Blending 2 Data Sources') +
labs(x=paste("Region Sales"), y=paste("Sum of Sales")) +
layer(data=df3(),
mapping=aes(x=EMH, y=FINAL_PLANTYPE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour=KPI),
position=position_identity()
#) + coord_flip() +
)+
layer(data=df3(),
mapping=aes(x=EMH, y=MEASURE_NAMES, label=(MEASURE_VALUES)),
stat="identity",
stat_params=list(),
geom="text",
#geom_params=list(colour="", hjust=-0.5),
position=position_identity()
)
plot3
})
})
shiny::runApp('04 Shiny')
shiny::runApp('04 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('04 Shiny')
shiny::runApp('04 Shiny')
shiny::runApp('04 Shiny')
shiny::runApp('04 Shiny')
shiny::runApp('04 Shiny')
shiny::runApp('04 Shiny')
